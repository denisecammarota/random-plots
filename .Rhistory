sigma <- c(0.1, 0.1) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing simulations
model_relization(time, N0, parameters)
gc()
# Solving a gLV + AE model with fluctuations using the euler-mayurama method ##################
# our model from Cammarota et al., 2023 #######################################################
# deterministic part of the equations (gLV + AE) #############################################
gLV_AE <- function(x, parameters){
# getting the parameters
b <- parameters$b
m <- parameters$m
C <- parameters$C
K <- parameters$K
alpha <- parameters$alpha
# derivatives vector (what we will return)
dx <- numeric(length(x))
# calculating derivatives
for(i in 1:length(x)){
comp_term <- sum(alpha[i, ]*(x/K))
dx[i] <- b[i]*x[i]*(1 - comp_term) - ((m[i]*x[i])/(1 + C[i]*x[i]))
}
# return derivatives
return(dx)
}
# stochastic part of the equations ###########################################################
stoch <- function(x, parameters){
# getting the parameters
sigma <- parameters$sigma
# stochastic vector (what we will return)
dx <- numeric(length(x))
# stochastic part vector
for(i in 1:length(x)){
dx[i] <- sigma[i]*x[i]
}
# return stochastic part
return(dx)
}
# one realization of the model function ######################################################
model_relization <- function(t, x, parameters){
# t is the sequence of times
# x is the initial condition
# parameters are all the parameters (deterministic + stochastic) (b, m, C, K, alpha, sigma)
# initializing our realization and parameters
nsteps <- length(time)
N <- length(parameters$b)
delta <- time[2] - time[1]
x_realization <- x # result that we will return, initialize with initial condition
parameters_det <- list(b = parameters$b, m = parameters$m, C = parameters$C,
K = parameters$K, alpha = parameters$alpha)
parameters_stoch <- list(sigma = parameters$sigma)
# iterating over all steps
x_curr <- x
for(i in seq(1, nsteps, 1)){
x_new <- x_curr + gLV_AE(x_curr, parameters_det)*delta +
stoch(x_curr, parameters_stoch)*rnorm(N, mean = 0, sd = sqrt(delta))
x_curr <- x_new
x_realization <- rbind(x_realization, x_new)
}
return(x_realization)
}
# parameters #################################################################################
# model parameters
N <- 2 # number of species
b <- c(2, 2) # birth rate vector
m <- c(3, 3) # death rate vector
C <- c(1, 1) # Allee effect constant
K <- c(1, 1) # Carrying capacity
alpha <- matrix(c(1, 2, 2, 1), nrow = N, byrow = TRUE) # competition matrix alpha (has to have 1s in diagonal)
sigma <- c(0.1, 0.1) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing simulations
model_relization(time, N0, parameters)
# effectively doing simulations
x <- model_relization(time, N0, parameters)
x
rownames(x)
rownames(x) <- NaN
rownames(x) <- NULL
x
gc()
# Solving a gLV + AE model with fluctuations using the euler-mayurama method ##################
# our model from Cammarota et al., 2023 #######################################################
# deterministic part of the equations (gLV + AE) #############################################
gLV_AE <- function(x, parameters){
# getting the parameters
b <- parameters$b
m <- parameters$m
C <- parameters$C
K <- parameters$K
alpha <- parameters$alpha
# derivatives vector (what we will return)
dx <- numeric(length(x))
# calculating derivatives
for(i in 1:length(x)){
comp_term <- sum(alpha[i, ]*(x/K))
dx[i] <- b[i]*x[i]*(1 - comp_term) - ((m[i]*x[i])/(1 + C[i]*x[i]))
}
# return derivatives
return(dx)
}
# stochastic part of the equations ###########################################################
stoch <- function(x, parameters){
# getting the parameters
sigma <- parameters$sigma
# stochastic vector (what we will return)
dx <- numeric(length(x))
# stochastic part vector
for(i in 1:length(x)){
dx[i] <- sigma[i]*x[i]
}
# return stochastic part
return(dx)
}
# one realization of the model function ######################################################
model_relization <- function(t, x, parameters){
# t is the sequence of times
# x is the initial condition
# parameters are all the parameters (deterministic + stochastic) (b, m, C, K, alpha, sigma)
# initializing our realization and parameters
nsteps <- length(time)
N <- length(parameters$b)
delta <- time[2] - time[1]
x_realization <- x # result that we will return, initialize with initial condition
parameters_det <- list(b = parameters$b, m = parameters$m, C = parameters$C,
K = parameters$K, alpha = parameters$alpha)
parameters_stoch <- list(sigma = parameters$sigma)
# iterating over all steps
x_curr <- x
for(i in seq(1, nsteps, 1)){
x_new <- x_curr + gLV_AE(x_curr, parameters_det)*delta +
stoch(x_curr, parameters_stoch)*rnorm(N, mean = 0, sd = sqrt(delta))
x_curr <- x_new
x_realization <- rbind(x_realization, x_new)
}
rownames(x_realization) <- NULL
return(x_realization)
}
# parameters #################################################################################
# model parameters
N <- 2 # number of species
b <- c(2, 2) # birth rate vector
m <- c(3, 3) # death rate vector
C <- c(1, 1) # Allee effect constant
K <- c(1, 1) # Carrying capacity
alpha <- matrix(c(1, 2, 2, 1), nrow = N, byrow = TRUE) # competition matrix alpha (has to have 1s in diagonal)
sigma <- c(0.1, 0.1) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing simulations
x <- model_relization(time, N0, parameters)
x
# doing many simulations
plot(x)
x[1]
x[1,]
x[,1]
# doing many simulations
plot(time, x[,1])
# doing many simulations
plot(times, x[,1])
times
time
gc()
# Solving a gLV + AE model with fluctuations using the euler-mayurama method ##################
# our model from Cammarota et al., 2023 #######################################################
# deterministic part of the equations (gLV + AE) #############################################
gLV_AE <- function(x, parameters){
# getting the parameters
b <- parameters$b
m <- parameters$m
C <- parameters$C
K <- parameters$K
alpha <- parameters$alpha
# derivatives vector (what we will return)
dx <- numeric(length(x))
# calculating derivatives
for(i in 1:length(x)){
comp_term <- sum(alpha[i, ]*(x/K))
dx[i] <- b[i]*x[i]*(1 - comp_term) - ((m[i]*x[i])/(1 + C[i]*x[i]))
}
# return derivatives
return(dx)
}
# stochastic part of the equations ###########################################################
stoch <- function(x, parameters){
# getting the parameters
sigma <- parameters$sigma
# stochastic vector (what we will return)
dx <- numeric(length(x))
# stochastic part vector
for(i in 1:length(x)){
dx[i] <- sigma[i]*x[i]
}
# return stochastic part
return(dx)
}
# one realization of the model function ######################################################
model_relization <- function(t, x, parameters){
# t is the sequence of times
# x is the initial condition
# parameters are all the parameters (deterministic + stochastic) (b, m, C, K, alpha, sigma)
# initializing our realization and parameters
nsteps <- length(time)
N <- length(parameters$b)
delta <- time[2] - time[1]
x_realization <- x # result that we will return, initialize with initial condition
parameters_det <- list(b = parameters$b, m = parameters$m, C = parameters$C,
K = parameters$K, alpha = parameters$alpha)
parameters_stoch <- list(sigma = parameters$sigma)
# iterating over all steps
x_curr <- x
for(i in seq(1, nsteps-1, 1)){
x_new <- x_curr + gLV_AE(x_curr, parameters_det)*delta +
stoch(x_curr, parameters_stoch)*rnorm(N, mean = 0, sd = sqrt(delta))
x_curr <- x_new
x_realization <- rbind(x_realization, x_new)
}
rownames(x_realization) <- NULL
return(x_realization)
}
# parameters #################################################################################
# model parameters
N <- 2 # number of species
b <- c(2, 2) # birth rate vector
m <- c(3, 3) # death rate vector
C <- c(1, 1) # Allee effect constant
K <- c(1, 1) # Carrying capacity
alpha <- matrix(c(1, 2, 2, 1), nrow = N, byrow = TRUE) # competition matrix alpha (has to have 1s in diagonal)
sigma <- c(0.1, 0.1) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing simulations
x <- model_relization(time, N0, parameters)
# doing many simulations
plot(times, x[,1])
times
time
# doing many simulations
plot(time, x[,1])
# effectively doing simulations
x <- model_relization(time, N0, parameters)
plot(time, x[,1])
lines(time, x[,1])
lines(time, x[,2])
plot(time, x[,1])
lines(time, x[,1])
lines(time, x[,2])
?rnorm
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(x)
x
x <- data.frame(time = time, x)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
x
melt(x)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
View(x)
sigma <- c(1, 1) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
plot(x[,1])
plot(x[1,])
plot(x[,2])
x <- melt(x, id = 'time')
x
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
melt(x)
melt(x, id = time)
sigma <- c(2, 2) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
plot(x[, 1])
plot(x[, 2])
# Solving a gLV + AE model with fluctuations using the euler-mayurama method ##################
# our model from Cammarota et al., 2023 #######################################################
# deterministic part of the equations (gLV + AE) #############################################
gLV_AE <- function(x, parameters){
# getting the parameters
b <- parameters$b
m <- parameters$m
C <- parameters$C
K <- parameters$K
alpha <- parameters$alpha
# derivatives vector (what we will return)
dx <- numeric(length(x))
# calculating derivatives
for(i in 1:length(x)){
comp_term <- sum(alpha[i, ]*(x/K))
dx[i] <- b[i]*x[i]*(1 - comp_term) - ((m[i]*x[i])/(1 + C[i]*x[i]))
}
# return derivatives
return(dx)
}
# stochastic part of the equations ###########################################################
stoch <- function(x, parameters){
# getting the parameters
sigma <- parameters$sigma
# stochastic vector (what we will return)
dx <- numeric(length(x))
# stochastic part vector
for(i in 1:length(x)){
dx[i] <- sigma[i]*x[i]
}
# return stochastic part
return(dx)
}
# one realization of the model function ######################################################
model_relization <- function(t, x, parameters){
# t is the sequence of times
# x is the initial condition
# parameters are all the parameters (deterministic + stochastic) (b, m, C, K, alpha, sigma)
# initializing our realization and parameters
nsteps <- length(time)
N <- length(parameters$b)
delta <- time[2] - time[1]
x_realization <- x # result that we will return, initialize with initial condition
parameters_det <- list(b = parameters$b, m = parameters$m, C = parameters$C,
K = parameters$K, alpha = parameters$alpha)
parameters_stoch <- list(sigma = parameters$sigma)
# iterating over all steps
x_curr <- x
for(i in seq(1, nsteps-1, 1)){
x_new <- x_curr + gLV_AE(x_curr, parameters_det)*delta +
stoch(x_curr, parameters_stoch)*rnorm(N, mean = 0, sd = sqrt(delta))
x_curr <- x_new
x_realization <- rbind(x_realization, x_new)
}
rownames(x_realization) <- NULL
return(x_realization)
}
# parameters #################################################################################
# model parameters
N <- 2 # number of species
b <- c(2, 2) # birth rate vector
m <- c(3, 3) # death rate vector
C <- c(1, 1) # Allee effect constant
K <- c(1, 1) # Carrying capacity
alpha <- matrix(c(1, 2, 2, 1), nrow = N, byrow = TRUE) # competition matrix alpha (has to have 1s in diagonal)
sigma <- c(1, 1) # sigma matrix for fluctuations
# simulation parameters
N0 <- c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 10, by = delta) # sequence of times for use
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha, sigma = sigma)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
melt(x, id = time)
View(x)
meltdf <- melt(df,id="time")
meltdf <- melt(x,id="time")
meltdf
View(parameters)
View(x)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
meltdf <- melt(x,id = "time")
ggplot(meltdf, aes(x = time, y = value, color = ))
View(meltdf)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
View(x)
View(x)
# effectively doing one simulation, for example
x <- model_relization(time, N0, parameters)
x <- data.frame(time = time, x)
ggplot(data, aes(x = time)) +
geom_line(aes(y = X1, color = "X1")) +
geom_line(aes(y = X2, color = "X2")) +
labs(title = "Time Series Data for X1 and X2",
x = "Time",
y = "Values",
color = "Variables") +
theme_minimal()
ggplot(data - x, aes(x = time)) +
geom_line(aes(y = X1, color = "X1")) +
geom_line(aes(y = X2, color = "X2")) +
labs(title = "Time Series Data for X1 and X2",
x = "Time",
y = "Values",
color = "Variables") +
theme_minimal()
ggplot(data = x, aes(x = time)) +
geom_line(aes(y = X1, color = "X1")) +
geom_line(aes(y = X2, color = "X2")) +
labs(title = "Time Series Data for X1 and X2",
x = "Time",
y = "Values",
color = "Variables") +
theme_minimal()
data_melted <- melt(x, id.vars = "time", variable.name = "variable", value.name = "value")
# Plot the data using ggplot
ggplot(data_melted, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "Time Series Data for X1 and X2",
x = "Time",
y = "Values",
color = "Variables") +
theme_minimal()
View(data_melted)
library(sf)
library(lubridate)
library(tidyverse)
library(dplyr)
library(readr)
library(rEDM)
library(reshape2)
# Loading full dataset ########
load('SP/dataset_SP.RData')
gLV_AE <- function(x, parameters){
# getting the parameters
b <- parameters$b
m <- parameters$m
C <- parameters$C
K <- parameters$K
alpha <- parameters$alpha
# derivatives vector (what we will return)
dx <- numeric(length(x))
dx=(b*x) * (1 - x/K - (alpha %*% x)/K) - ((m*x)/ (1+ (C*x))) # FROM HUGO in matrix notation
# calculating derivatives
# for(i in 1:length(x)){
#   comp_term <- sum(alpha[i, ]*(x/K))
#   dx[i] <- b[i]*x[i]*(1 - comp_term) - ((m[i]*x[i])/(1 + C[i]*x[i]))
# }
# return derivatives
return(dx)
}
# stochastic part of the equations ###########################################################
stoch <- function(x, parameters){
# getting the parameters
sigma <- parameters$sigma
# stochastic vector (what we will return)
#dx <- numeric(length(x)) # There is no need to define this vector as long as x and sigma are defined
dx<-sigma*x # R does this directly modified by AMS
# stochastic part vector
#for(i in 1:length(x)){
#  dx[i] <- sigma[i]*x[i]
#}
# return stochastic part
return(dx)
}
model_relization <- function(t, x, parameters){
# t is the sequence of times
# x is the initial condition
# parameters are all the parameters (deterministic + stochastic) (b, m, C, K, alpha, sigma)
# initializing our realization and parameters
nsteps <- length(time)
N <- length(parameters$b)
delta <- time[2] - time[1]
x_realization <- x # result that we will return, initialize with initial condition
parameters_det <- list(b = parameters$b, m = parameters$m, C = parameters$C,
K = parameters$K, alpha = parameters$alpha)
parameters_stoch <- list(sigma = parameters$sigma)
# iterating over all steps
x_curr <- x
for(i in seq(1, nsteps-1, 1)){
x_new <- x_curr +
as.numeric(gLV_AE(x_curr, parameters_det)*delta) +
stoch(x_curr, parameters_stoch)*rnorm(N, mean = 0, sd = sqrt(delta))
x_curr <- x_new
x_realization <- rbind(x_realization, x_new)
}
rownames(x_realization) <- NULL
return(x_realization)
}
# simulation parameters
N0 <-inity #c(0.5, 0.5) # initial conditions
delta <- 0.1
time <- seq(0, 1000, by = delta) # sequence of times for use
sigma=0.1
parameters <- list(b = b, m = m, C = C, K = K, alpha = alpha_MatEMP, sigma = sigma)
x <- model_relization(t=time, x=N0, parameters=parameters)
x <- data.frame(time = time, x)
matplot(x[,1], x[,-1],type="l")
setwd('random-plots')
