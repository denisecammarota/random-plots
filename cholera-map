{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":36179,"databundleVersionId":3617206,"sourceType":"competition"}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/denisecammarota/john-snow-cholera-map?scriptVersionId=148146390\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## Importing Data and Packages","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # matplotlib for plotting\nimport geopandas as gdf # geopandas for plotting maps\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-10-26T22:02:57.462162Z","iopub.execute_input":"2023-10-26T22:02:57.462579Z","iopub.status.idle":"2023-10-26T22:02:57.471376Z","shell.execute_reply.started":"2023-10-26T22:02:57.462541Z","shell.execute_reply":"2023-10-26T22:02:57.470112Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Plotting John Snow's Cholera Map\n\nPlotting John Snow's Cholera Map of deaths and water pumps in Soho neighbourhood, London. ","metadata":{}},{"cell_type":"markdown","source":"### Plotting Soho\nFirst, we plot the Soho map as provided by the competition.","metadata":{}},{"cell_type":"code","source":"soho_map = gdf.read_file('../input/cholera-deaths/polys.shp') #shape of map\n\nfig, ax = plt.subplots()\nsoho_map.plot(ax = ax, color='white', edgecolor='black')\nax.set_title('Map of the Soho Region')\nax.set_axis_off()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T22:02:57.473414Z","iopub.execute_input":"2023-10-26T22:02:57.473777Z","iopub.status.idle":"2023-10-26T22:02:57.98059Z","shell.execute_reply.started":"2023-10-26T22:02:57.473739Z","shell.execute_reply":"2023-10-26T22:02:57.979246Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Adding Deaths and Pumps","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize = (10,8))\nsoho_map.plot(ax = ax, color='white', edgecolor='black')\ndeaths = gdf.read_file('../input/cholera-deaths/Cholera_Deaths.shp') #shape of map\npumps = gdf.read_file('../input/cholera-deaths/Pumps.shp') #shape of map\ndeaths.plot(color='red', ax=ax, alpha = 0.6, label= 'Deaths')\npumps.plot(color='black',  ax=ax, marker='x',linewidths=3, markersize = 55, label= 'Pumps')\nax.legend(loc = 'best')\nax.set_title('Map of the Soho Region with Deaths and Pumps (1854)', pad = 20)\nax.set_axis_off()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T22:02:57.98327Z","iopub.execute_input":"2023-10-26T22:02:57.983757Z","iopub.status.idle":"2023-10-26T22:02:58.487297Z","shell.execute_reply.started":"2023-10-26T22:02:57.983713Z","shell.execute_reply":"2023-10-26T22:02:58.486458Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Measuring distance between pumps and deaths. \n\nEven though the plot was enough for John Snow - and us after seeing it - to design an effective strategy for preventing Cholera deaths, it does not provide us with any quantitative information that associates cholera cases and deaths with water pumps. In order to do this, we will count the number of cases in a 50 meters ratio of water pumps.","metadata":{}},{"cell_type":"markdown","source":"First we need to create buffers around each pump to count","metadata":{}},{"cell_type":"code","source":"# first we create buffers around each pump to count\npumps['buffer'] = pumps['geometry'].buffer(50)\n# plotting this into our previous map, we get\nfig, ax = plt.subplots(figsize = (10,8))\nsoho_map.plot(ax = ax, color='white', edgecolor='black')\ndeaths.plot(color='red', ax=ax, alpha = 0.6, label= 'Deaths')\npumps['buffer'].plot(color = 'lightblue', alpha = 0.4, ax=ax)\npumps.geometry.plot(color='black',  ax=ax, marker='x',linewidths=3, markersize = 55, label= 'Pumps')\nax.legend(loc = 'best')\nax.set_title('Map of the Soho Region with Deaths and Pumps (1854)', pad = 20)\nax.set_axis_off()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T22:02:58.488595Z","iopub.execute_input":"2023-10-26T22:02:58.489653Z","iopub.status.idle":"2023-10-26T22:02:58.969283Z","shell.execute_reply.started":"2023-10-26T22:02:58.489616Z","shell.execute_reply":"2023-10-26T22:02:58.968464Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now we measure deaths in this radius of 50 meters ","metadata":{}},{"cell_type":"code","source":"dp_list = []\nfor pump in pumps['buffer']:\n    j = 0\n    for i in range(deaths.shape[0]):\n        j += pump.contains(deaths['geometry'][i])*(deaths['Count'][i])\n    dp_list.append(j)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T22:12:35.078375Z","iopub.execute_input":"2023-10-26T22:12:35.078789Z","iopub.status.idle":"2023-10-26T22:12:35.14763Z","shell.execute_reply.started":"2023-10-26T22:12:35.078754Z","shell.execute_reply":"2023-10-26T22:12:35.146511Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Uploading the results ","metadata":{}},{"cell_type":"code","source":"sample=pd.read_csv(\"../input/cholera-deaths/sample.csv\")\nsample['Count'] = 0\nsample['Count'] = dp_list\nsample.set_index('Id_2')","metadata":{"execution":{"iopub.status.busy":"2023-10-26T22:20:28.513564Z","iopub.execute_input":"2023-10-26T22:20:28.514006Z","iopub.status.idle":"2023-10-26T22:20:28.531404Z","shell.execute_reply.started":"2023-10-26T22:20:28.513969Z","shell.execute_reply":"2023-10-26T22:20:28.52995Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sample.to_csv(\"sample.csv\")","metadata":{"execution":{"iopub.status.busy":"2023-10-26T22:20:53.284004Z","iopub.execute_input":"2023-10-26T22:20:53.284637Z","iopub.status.idle":"2023-10-26T22:20:53.290741Z","shell.execute_reply.started":"2023-10-26T22:20:53.284602Z","shell.execute_reply":"2023-10-26T22:20:53.289669Z"},"trusted":true},"outputs":[],"execution_count":null}]}